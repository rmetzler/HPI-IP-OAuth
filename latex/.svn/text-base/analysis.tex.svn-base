\section{Performance and Memory Analysis}
\label{sec:analysis}

We profiled our application to get an impression of how it affects the performance and memory consumption. In our first benchmark (table \ref{tab:bench_observer} and \lstinline|lively.Tests.ObjectExplorerBenchmark| respectively) we analyzed the performance of our object observer implementation: With a variable number of iterations, properties of objects are set to different values see the impact of explicitly defined setter (b) and of an installed object observer (c); (a) stands for the situation without any explicit manipulation. Apparently, the usage of setters have little impact. Since the object observer installs additional wrapper, invokes change handler and polls frequently, using the object observer slows down setting properties to a factor of three (what is still acceptable).

\begin{table*}\centering 
\ra{1.3} 
\begin{tabular}{@{}lcrcrcrcr@{}}
\toprule 
&& \multicolumn{7}{c}{\emph{number of iterations}}\\
& \phantom{abc}& 1.000 & \phantom{abc} &  10.000 &  \phantom{abc} & 100.000 & \phantom{abc} & 500.000\\ 
\midrule 
(a) "usual way" && 0 ms && 6 ms && 80 ms && 500 ms\\ 
(b) getter \& setter && 0 ms && 9 ms && 100 ms && 740 ms\\ 
(c) object observer && 1 ms && 15 ms && 170 ms && 1600 ms\\ 
\bottomrule 
\end{tabular} 
\caption{The impact of manipulating objects with setter and installing the object observer} 
\label{tab:bench_observer}
\end{table*}

The other benchmark (table \ref{tab:bench_explorer}) concentrates on the performance and memory impacts of the whole object explorer. In general, we compared the object explorer in the example Lively application, with disabled and enabled live mode. We took the time for one rotation of the example engine widget as performance measure, for memory consumption Google Chrome's task manager has been used. As it can be seen in the table, the object explorer has high performance and memory impacts when many properties/ objects are displayed (case(c) and (e)). Especially when observing many submorph arrays (e), the system is extremely slowed down because arrays have to be observed through polling. But the more general use cases (b) and (d) reveals that the application is still very responsive.

\begin{table*}\centering 
\ra{1.3} 
\begin{tabular}{@{}lcrrrcrrr@{}}
\toprule 
&& \multicolumn{3}{c}{Engine Rotation} && \multicolumn{3}{c}{Memory Consumption}\\
\cmidrule{3-5} \cmidrule{7-9}
& \phantom{abc} & Disabled & Enabled & Factor & \phantom{abc} & Disabled & Enabled & Factor \\ 
\midrule 
(a) without object explorer && 1,65 s & 1,65 s & 1,00 && 101,0 Mb & 101,0 Mb & 1,00\\ 
(b) standard view && 1,70 s & 1,85 s & 1,08&& 112,0 Mb & 113,8 Mb & 1,01\\ 
(c) all functions view && 2,00 s & 3,05 s & 1,52 && 134,6 Mb & 140,5 Mb & 1,04\\ 
(d) morph view && 1,65 s & 1,70 s & 1,03 && 102,6 Mb & 107,7 Mb & 1,04\\ 
(e) morph view (expanded) && 4,00 s & 17,55 s & 4,38 && 137,7 Mb & 258,5 Mb & 1,87\\
\bottomrule 
\end{tabular} 
\caption{Benchmarks for exploring example world (with different views and enabled/ disabled live mode)} 
\label{tab:bench_explorer}
\end{table*}