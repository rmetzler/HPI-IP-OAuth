\section{Summary \& Outlook} %(Alle)
Many functionalities that would require a certain metaobject protocol in other programming languages are quite common in JavaScript. Metaprogramming (like adding new functions to objects) is directly built into the language and is used by developers regularly without even knowing it. Still there are limitations on what is possible in JavaScript. One major flaw we found were restricted intercession possibilities for arrays. It is also difficult to recognize new properties of objects and client code is required to poll for changes. Additionally, the lack of consistent cross-browser support is quite challenging, a challenge that "traditional" JavaScript web developers also have to face.
While testing our implementations we recognized that the performance of the various JavaScript implementations vary greatly (even between Safari and Google Chrome).

Despite of the challenges mentioned above, we conclude that our object explorer implementation fulfills the requirements from the introduction. For future work, the following topics should be considered: First the object observer should be aware of the fact that wrapped properties may be wrapped by a different meta program again. The current implementation would not be able to uninstall the wrapper in that case. Fortunately there are existing solutions out there \cite{WrapperRemoval}. Another performance improvement would result by drawing the svg elements for the tree view nodes directly rather then using Lively morphs. A large number of morphs drops the performance significantly, especially in case of moving the object explorer around.